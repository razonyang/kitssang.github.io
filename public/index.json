[{"categories":null,"content":" 博客主要用来记录一些之前的学习笔记、算法、疑难问题解决、配置等，方便自己日常使用 博客直接使用的Bootstrap ，并没有修改什么，感谢这个主题，功能齐全，足够应付我的日常使用 如果能帮助到你，那我非常的高兴，如果暂时不能够帮助到你，也希望你能持续关注我，进行一些交流和分享  ","date":"2021-05-27","permalink":"/about/","series":null,"tags":null,"title":"关于我"},{"categories":["计算机组成原理"],"content":"计算机内部所有信息采用二进制表示：\n 制造两个稳定态的物理器件比较容易 二进制的编码、计数、运算规则简单 与逻辑命题对应、便于逻辑运算、并能方便的用逻辑电路实现算术运算  真值和机器数：\n 机器数：用0和1编码的计算机内部的0/1序列 真值：机器数真正的值，即：现实生活中带正负号的数   数据表示：能被计算机硬件直接识别的数据类型\n 可以用计算机硬件直接表示 可以有计算机指令直接调用   数据表示和数据结构的关系：\n 数据表示研究计算机硬件可以直接识别的数据类型 数据结构研究在数据表示基础上，如何让计算机处理硬件不能直接识别的数据类型  数据宽度：\n字长：CPU中的数据通路的宽度，等于CPU内部总线的宽度或运算器的位数或通用寄存器的宽度等\n字和字长的宽度可以一样，也可以不同，通常是字节的整数倍\n常用的数值数据  定点数 浮点数 十进制数  表示正负数： 在所有数的前面设置符号位\n “0”表示正数 “1”表示负数 第一位不具备数值的性质  表示小数点： 小数点固定位置 定点数\n 小数点左边的二进制数是整数，右边是小数 计算机中通常将数分成定点整数和定点小数 小数点在数据类型中  表示零：0的补码表示式统一的\n科学计数法：\n规格化形式：小数点前只有一位非0数\n1985年制定了浮点数标准 IEEE 754\n","date":"2021-05-17","permalink":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%95%B0%E6%8D%AE%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/","series":["计算机组成原理"],"tags":["计算机组成原理"],"title":"数据在计算机中的表示"},{"categories":["计算机组成原理"],"content":"指令： 计算机实现某个基本操作的命令\n指令系统： 一台计算机的所有指令的集合\n设计原则：\n  完备性\n  有限性\n  规整性\n  兼容性\n向上（下）兼容\n向前（后）兼容\n  一个较完善的指令系统应该包括：\n 数据传送指令 输入输出指令 算术运算指令 逻辑运算指令 系统控制指令 程序控制指令  指令系统的设计大体上只有两种：\n  复杂指令集计算机 CISC 出现较早，大而全\n 指令系统复杂 指令周期长 各种指令都能访问存储器 有专用的寄存器 采用微程序控制 难以进行编译优化生成高效目标代码  存在的问题：\n 研制周期长 难以保证设计的正确性 机器的时钟周期长，降低了系统的性能 效率低下    精简指令集计算机 RISC 小而精\n 简化的指令系统 以寄存器-寄存器方式工作 指令周期短 采用大量通用寄存器，以减少访问次数 采用组合逻辑电路控制，不用或者少用微程序控制 采用优化的编译系统，力求有效的支持高级语言程序    现代处理器大多采用RISC体系结构，CISC和RISC正逐步融合\n指令格式 指令的含义决定了指令的格式和指令的长度：操作码+地址码\n指令长度：\n 一条指令包含的二进制代码位数 取决于操作码长度、操作码地址长度和地址个数  定长指令字：所有的指令的长度相同，向最长指令看齐 变长指令字：不同指令的长度不同    操作码：\n 每条指令的操作码只能有一个 用一定长度的不同编码表示不同的操作  地址码：\n 每条指令的地址码可以有多个  地址码的个数与性能和实现难度密切相关\n操作码 操作码的编码方式决定操作码的长度\n 定长操作码法 变长、扩展操作码法  操作码长度是否可变和指令长度是否可变没有绝对联系\n  关注程序代码长度时：变长指令字、变长操作码\n  关注性能的时候：定长指令字、定长操作码\n  定长操作码：\n​\t基本思想：指令的操作码部分采用固定长度的编码\n​\t特点：译码简单，但有信息的冗余\n扩展操作码：\n​\t基本思想： 指令的操作码部分采用可变长度的编码\n​\t操作码的编码长度分成几种固定长的格式，操作码的位数随地址数的减少而增加，被大多数指令集采用\n​\t优点：\n  缩短指令的长度\n  减少程序的总位数\n  增加指令字所能表示的操作信息\n  一个重要原则：\n 使用频度高的指令使用短的操作码 使用拼读低的指令使用长的操作码  地址码 地址的选择依赖于指令系统的结构\n 堆栈结构：零地址指令 累加器结构：一地址指令 通用寄存器结构：二三地址指令  零地址指令：\n 无需操作数 如：停机/空操作 所需要的操作数为默认的 如：堆栈等  一地址指令：其地址既是源操作数的地址，也是存放结果的地址\n 单目运算： 如：取反/取负 双目运算： 另一操作数为默认的 如：累加器等  二地址指令： 分别存放双目运算中两个源操作数地址，并将其中一个地址作为存放结果的地址\n三地址指令（RISC）： 分别为双目运算中的两个源操作数地址和存放结果的地址\n寻址方式 寻址方式：就是如何找到操作数存放位置的方法\n寻址方式出现的目的：\n 扩大访存范围 提高访问数据的灵活性和有效性 支持软件技术的发展：多道程序设计  基本寻址方式   立即数寻址\n  存储器直接寻址\n  寄存器直接寻址\n  存储器间接寻址\n  寄存器间接寻址\n  偏移寻址\n  堆栈寻址\n  小结：\n寻址方式的确定：\n 在操作码中给定寻址方式 专门的寻址方式位  复合寻址：\n​\t","date":"2021-05-16","permalink":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/","series":["计算机组成原理"],"tags":["计算机组成原理"],"title":"指令系统"},{"categories":["计算机组成原理"],"content":"计算机有两种不同的性能\n    响应时间： 完成单个任务所需的总时间 执行之间 等待时间或时延     吞吐率： 单位时间内所完成的任务总量 带宽  不同的应用场合用户关心的性能不同\n 吞吐率高的场景 \u0026ndash;多媒体应用 响应时间短的场合 \u0026ndash;事务处理系统 吞吐率高且响应时间短的场合 \u0026ndash;ATM、文件服务器、Web服务器  计算机性能:响应时间的倒数\n系统响应时间（用户感受到的） CPU执行时间：CPU真正花在程序执行上的时间\n 用户CPU时间：用来运行用户代码的时间 系统CPU时间：为执行用户程序而运行的一些操作系统代码的时间  其他时间：等待I/O操作完成或者CPU花在其他用户程序的时间\n计算机系统性能不等于CPU性能\n 系统性能： 系统响应时间 CPU性能： 用户CPU时间  CPU性能： CPU真正用于用户程序执行上的时间\nCPU执行时间 \u0026ndash;评价CPU性能最重要的指标\n一个程序的CPU执行时间=执行一个程序所需要的基本时间单元的数量*基本时间单元\n时钟周期  所有计算机都有一个固定频率的硬件时钟，决定各种硬件事件发生和执行的时间和顺序 硬件时钟所产生的离散时间间隔称为时钟周期  时钟频率  时钟周期的倒数  一个程序的CPU执行时间=执行一个程序的CPU时钟周期数*时钟周期时间\n一个程序的CPU执行时间=执行一个程序的CPU时钟周期数/时钟频率\n一个程序的CPU时钟周期数 = 程序的指令数 * 每条指令的平均时钟周期数\n每条指令的平均时钟周期数： CPI\n*一个程序的CPU执行时间=指令数/程序 * CPI 时钟周期时间\n==评价性能的时候必须在各个因素之间进行权衡。==\n计算机速度 硬件设计的基本策略： 使最常使用的部件执行的最快\n计算机功耗 动态功耗： CMOS中主要的能量消耗\n​\t动态功耗主要是指晶体管翻转时消耗的能量\n减少芯片动态功耗的方法\n 降低时钟频率 降低工作电压 （低电压使晶体管的漏电流问题更加突出）  静态功耗： 即使芯片内晶体管关闭，仍有漏电流发生\n计算机成本 与芯片成本有关的因素：\n 晶圆价格 晶圆所含芯片数 芯片合格率 ","date":"2021-05-15","permalink":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7/","series":["计算机组成原理"],"tags":["计算机组成原理"],"title":"计算机性能评价"},{"categories":["计算机组成原理"],"content":"处理器（CPU - Central Processing Unit ) 功能： 执行程序\n组成： Control Unit + Data path\n  控制单元： 对指令进行译码，产生控制信号\n  数据通路： 完成指令的执行\n  核心： ALU + 寄存器（Regisiter）\nALU用来执行算术和逻辑运算\n寄存器用来存储临时的数据或者控制信息，例如：PC、IR等\n  存储器 功能：存储程序和数据\n组成（层次化结构）\n  内存： Cache + Main memory\nCache（高速缓存）: 存放最近使用的数据和指令\n主存：存放被启动的程序中的部分数据和指令\n  外存： 磁盘、固态硬盘、光盘、磁盘\n磁盘/固态盘： 存放系统中所有软件和文档\n光盘、磁盘：脱机存档\n  输入输出 功能： 各种信息的输入/输出\n组成： I/O Controller + I/O Device\n I/O Controller ： 控制外设工作，完成主机和外设之间的工作 I/O device： 输入输出信息  总线 总线用于各功能部件之间的连接\n","date":"2021-05-14","permalink":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90/","series":["计算机组成原理"],"tags":["计算机组成原理"],"title":"硬件组成"},{"categories":["计算机组成原理"],"content":"存储程序原理 冯诺依曼第一次书面提出了存储程序原理和存储程序数字计算机\n 存储程序原理：将事先设计好，用以描述计算机解题过程的程序如同数据一样，采用二进制形式存储在机器中，计算机在工作时自动高速地从机器中逐条取出指令加以执行\n 核心思想：存储程序\n冯诺依曼计算机框架 现代计算机组成框图 非冯诺依曼模型  神经网络 基因算法 量子计算 ","date":"2021-05-12","permalink":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E6%80%9D%E6%83%B3%E5%92%8C%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A1%86%E6%9E%B6/","series":["计算机组成原理"],"tags":["计算机组成原理"],"title":"存储程序思想和冯诺依曼框架"},{"categories":["计算机组成原理"],"content":"简单的软硬件层次结构 系统软件：提供公共服务程序  操作系统 编译器 汇编器  计算机的层次结构 指令系统是软/硬件的交界面\n不同的用户工作在不同的层次，看到的计算机是不一样的\n从程序到电子信号 计算机内部工作过程：逐条执行加载到内存中的二进制机器指令流的过程\n一条指令的执行过程可以被简单的分为两个操作阶段：\n 取指阶段，CPU从内存中读取指令，程序计算器保存要被取出的下一条指令的地址，除非遇到跳转指令等情况，否则，PC一般都是每次取指后加上一个增量（当前指令的字节数） 执行阶段，对取出的指令先译码，解释指令的功能，然后执行译码好的指令，期间可能会读写存储器或端口来获取操作数或者存放结果  程序的执行过程就是周期性和重复性地进行取指令和执行指令的两个操作\n计算机系统基本执行结构 ","date":"2021-05-11","permalink":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A1%A8%E8%B1%A1%E4%B9%8B%E4%B8%8B/","series":["计算机组成原理"],"tags":["计算机组成原理"],"title":"程序的表象之下"},{"categories":["计算机组成原理"],"content":"计算、实验和理论已成为科学研究的三大方法\n利用计算机实验，再现、预测和发现客观世界运动规律和演化特性的全过程\n 无损伤：模拟真实实验无法进行的事情 全过程全时空分析：充分了解和细致认识研究对象 低成本、短周期、反复细致的进行  上世界60-70年代，计算机的性能受限于内存容量。程序员尽可能少地用内存提高程序的执行速度\n现代，程序员需要理解的是存储的层次化特性和处理器并行化特点\n决定程序性能能的主要因素：\n 程序中使用的算法 \u0026mdash;数据结构、算法设计 创建程序并翻译成为机器指令的软件 \u0026mdash;编译原理 计算机各部件执行效率 \u0026mdash;计算机原理、操作系统  软硬件如何影响性能\n","date":"2021-05-10","permalink":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%A6%82%E8%BF%B0/","series":["计算机组成原理"],"tags":["计算机组成原理"],"title":"概述"}]